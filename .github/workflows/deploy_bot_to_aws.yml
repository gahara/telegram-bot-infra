name: "Publish to AWS"

on:
  push:
    tags:
      - "v*"
env:
  TF_VAR_TELEGRAM_TOKEN: ${{ secrets.TF_VAR_TELEGRAM_TOKEN }}
  TF_VAR_LAMBDA_BUCKET_NAME: ${{ secrets.TF_VAR_LAMBDA_BUCKET_NAME }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.TFBACKENDREGION }}
  NEED_RUN_CREATE_BUCKET: NO

jobs:
  deploy:
    name: "Deploy infrastructure to AWS"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Setup python and specific version"
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Check if corresponding bucket exists
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master
        with:
          version: 2
      - run: aws s3api head-bucket --bucket ${{ vars.S3BUCKETNAME }}
      - run: |
          if aws s3api head-bucket --bucket ${{ vars.S3BUCKETNAME }} 2>& 1 | grep 'Not';
          then  echo "NEED_RUN_CREATE_BUCKET=YES" >> $GITHUB_ENV
          fi
      - run: |
          echo Will new bucket be created: ${{env.NEED_RUN_CREATE_BUCKET}}
        shell: bash
      - name: Deploy to AWS CloudFormation
        if: ${{ env.NEED_RUN_CREATE_BUCKET  == 'YES' }}
        continue-on-error: true
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ vars.S3STACKNAME}}
          template: create_s3.yaml
          parameter-overrides: "S3BucketName=${{ vars.S3BUCKETNAME }},S3Tag=${{ vars.S3TAG }}"

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5
      - name: "Terraform init"
        run: terraform init --upgrade -backend-config="bucket=${{ vars.S3BUCKETNAME }}" -backend-config="key=${{ secrets.TFBACKENDKEY }}" -backend-config="region=${{ vars.TFBACKENDREGION }}"

      - name: "Terraform validate"
        run: terraform validate
        continue-on-error: false
      - name: "Terraform plan"
        run: terraform plan

      - name: "Terraform apply"
        run: terraform apply --auto-approve
